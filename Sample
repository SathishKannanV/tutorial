/**

 * 

 */

package com.aetna.prvrte.rteintranet.adapter;



import java.sql.ResultSet;

import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.LinkedHashMap;

import java.util.LinkedList;

import java.util.List;

import java.util.Map;



import javax.sql.DataSource;



import org.apache.commons.logging.Log;

import org.apache.commons.logging.LogFactory;

import org.springframework.dao.DataAccessException;

import org.springframework.jdbc.core.RowMapper;

import org.springframework.jdbc.core.SqlOutParameter;

import org.springframework.jdbc.core.SqlParameter;

import org.springframework.jdbc.core.SqlReturnResultSet;

import org.springframework.jdbc.object.StoredProcedure;



import com.aetna.prvrte.rteintranet.dto.AdasvctDTO;

import com.aetna.prvrte.rteintranet.exception.ApplicationException;

import com.aetna.prvrte.rteintranet.util.ApplicationConstants;

import com.aetna.prvrte.rteintranet.util.DBConstants;

import com.aetna.prvrte.rteintranet.util.RteIntranetUtils;

import com.aetna.prvrte.rteintranet.vo.AdasvctVO;



/**

 * This Adapter class is to call the stored procedure call to manipulated the

 * data in data store

 * 

 * @author N726899 Cognizant_Offshore

 */

public class AdasvctDisplayAdapter extends StoredProcedure {



	public AdasvctDisplayAdapter() {}



	/*

	 * Instance of Log Factory.

	 */

	private final Log log = LogFactory.getLog(AdasvctDisplayAdapter.class);

	/*

	 * Constructor to initialize the data source and stored procedure.

	 */

	@SuppressWarnings("rawtypes")

	public AdasvctDisplayAdapter(DataSource datasource, String storedProc)

			throws SQLException {

		super(datasource, storedProc);

		System.out.println(" AdasvctDisplayAdapter ------------------> " + storedProc);

		log.info("Loaded Stored procedure of AdasvctAdapter : " + storedProc);

		declareParameter(new SqlParameter(DBConstants.LS_ADASVCT_ADA_CD, Types.CHAR));

		declareParameter(new SqlParameter(DBConstants.LS_SVCTYP_CD, Types.CHAR));

		declareParameter(new SqlOutParameter(DBConstants.LS_SQLCODE, Types.INTEGER));



		declareParameter(new SqlReturnResultSet(DBConstants.READ_CURSOR4, new RowMapper() {

			/*

			 * (non-Javadoc)

			 * 

			 * @see org.springframework.jdbc.core.RowMapper#mapRow(java.sql.ResultSet , int)

			 */

			public Object mapRow(final ResultSet rs, final int arg1)

					throws SQLException {

				AdasvctVO adasvctVO = new AdasvctVO();

				adasvctVO.setExpDate(RteIntranetUtils.getTrimmedString(rs.getString(DBConstants.ADASVCT_EXP_DT)));

				adasvctVO.setAdaCd(RteIntranetUtils.getTrimmedString(rs.getString(DBConstants.ADASVCT_ADA_CD)));

				adasvctVO.setPostedDate(RteIntranetUtils.getTrimmedString(rs.getString(DBConstants.ADASVCT_POSTED_DT)));

				adasvctVO.setSvcTypeCd(RteIntranetUtils.getTrimmedString(rs.getString(DBConstants.SVCTYP_CD)));

				adasvctVO.setEffDate(RteIntranetUtils.getTrimmedString(rs.getString(DBConstants.ADASVCT_EFF_DT)));

				adasvctVO.setUpdatedInd(ApplicationConstants.UPDATE_IND_N);

				return adasvctVO;

			}

		}));

	}

	

	/**

	 * Method to get the ADASVCT list from data store.

	 * 

	 * @param adasvctDTO

	 * 			adasvctDTO object.

	 * 

	 * @return Map of ADASVCT list and success or error message.

	 * 

	 * @exception ApplicationException if data not found in data store.

	 */

	@SuppressWarnings("unchecked")

	public Map<String, Object> getAdasvctLookUpList(AdasvctDTO adasvctDTO) throws ApplicationException {

		if (log.isDebugEnabled()) {

			log.warn("---- Entering getAdasvctLookUpList ---");

		}

		Map<String, Object> resultMap = new HashMap<String, Object>();

		HashMap<String, Object> params = new LinkedHashMap<String, Object>();

		List<AdasvctVO> adasvctList = new LinkedList<AdasvctVO>();

		String newMessage = "";

		try {

			String queryAdaCd = RteIntranetUtils.getTrimmedString(adasvctDTO.getAdaCd());

			String querySvcTypeCd = RteIntranetUtils.getTrimmedString(adasvctDTO.getSvcTypeCd());

			

			params.put(DBConstants.LS_ADASVCT_ADA_CD, queryAdaCd);

			params.put(DBConstants.LS_SVCTYP_CD, querySvcTypeCd);

			

			log.info("Params for getting Adasvct LookUp List : " + params);

			Map<String, Object> results = execute(params);

			String sqlCode = String.valueOf(results.get(DBConstants.LS_SQLCODE));

			

			if ("0".equals(sqlCode)) {

				adasvctList = (ArrayList<AdasvctVO>) results.get(DBConstants.READ_CURSOR4);

				newMessage = "Data found on database for ADA Cd: " + queryAdaCd + " or Service Type Cd: " + querySvcTypeCd;

				log.warn("-----------------------------> " + "Adasvct LookUp List count : [" + adasvctList.size() + "]");

				if (adasvctList.isEmpty()) {

					newMessage = "No Data on database for ADA Cd: " + queryAdaCd + " or Service Type Cd: " + querySvcTypeCd;

				}

			} else {

				log.warn("-----------------------------> "	+ "Problem in DB2. Sqlcode: " + sqlCode);

				newMessage = "Problem in DB2. Sqlcode: " + sqlCode;

			}

			

			resultMap.put("adasvctMsg", newMessage);

			resultMap.put("adasvctList", adasvctList);

			return resultMap;

			

		} catch (DataAccessException dae) {

			log.error("AdasvctDisplayAdapter : Data access excpetion occured " + dae);

			throw new ApplicationException(ApplicationConstants.ERR_IR_ACCESS, dae.getMessage(), dae);

		} catch (Exception exception) {

			log.error("AdasvctDisplayAdapter : generic error occured  " + exception);

			throw new ApplicationException(ApplicationConstants.ERR_GENERIC, exception.getMessage(), exception);

		} finally {



		}

	}

}

