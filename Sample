<?xml version="1.0"?>
<project name="RteIntranet"
         default="main"
         basedir=".">
  <!-- Import properties from properties files -->
  <property file="${user.home}/build.properties" />
  <property file="build.properties" />
  <property file="project.properties" />
  <property environment="env" />
   <property name="clover.home"
            value="${shared.lib.home}/test-libs" />
  <!-- Create the classpath -->
  <path id="clover.classpath">
    <fileset dir="${clover.home}">
      <include name="clover*.jar" />
    </fileset>
  </path>
  <path id="project.classpath">
    <!-- All of WAS, including Java -->
    <fileset dir="${was.home}/lib">
      <include name="**/*.jar" />
    </fileset>
    <!-- All framework libs -->
    <fileset dir="${shared.lib.home}">
      <include name="**/*.jar" />
    </fileset>
    
    <fileset dir="${aec.lib.home}">
      <include name="**/*.jar" />
    </fileset>
    
    
    <!-- JARs from Associated Projects -->
    <fileset dir="${master.dist.dir}">
      <include name="**/*.jar" />
    </fileset>
  
  </path>
  <taskdef resource="cloverlib.xml"
           classpathref="clover.classpath" />
  <!-- ================================================================ -->
  <!-- M A I N                                                          -->
  <!-- ================================================================ -->
  <target name="main">
    <antcall target="dist" />
  </target>
  <target name="coverage.setup"
          unless="no.coverage">
    <echo>Enabling coverage!...</echo>
    <clover-env />
    <clover-clean />
  </target>
  <!-- ================================================================ -->
  <!-- B A N N E R                                                      -->
  <!-- ================================================================ -->
  <target name="banner" 
          depends="coverage.setup">
    <exec executable="hostname"
          outputproperty="hostname" />
    <echo message="================================================= " />
    <echo message="     Project :  ${project}                        " />
    <echo message="================================================= " />
  	<echo message="shared.lib.home = ${shared.lib.home}" />
    <echo message="Build Host = ${host.name}" />
    <echo message="USER_HOME = ${user.home}" />
    <echo message="Base Directory = ${basedir}" />
    <echo message="Build Directory = ${build.dir}" />
    <echo message="ANT_HOME   = ${env.ANT_HOME}" />
    <echo message="ANT Version = ${ant.version}" />
    <echo message="ANT File = ${ant.file}" />
    <echo message="WAS_HOME = ${was.home}" />
    <echo message="JAVA_HOME  = ${env.JAVA_HOME}" />
    <echo message="JavaVersion = ${java.version}" />
    <echo message="MQ_HOME = ${mq.home}" />
    <echo message="DB2_HOME = ${cae.home}" />
  </target>
  <!-- =================================================================== -->
  <!-- C L E A N                                                           -->
  <!-- =================================================================== -->
  <target name="clean"
          depends="banner">
    <delete dir="${dist.dir}"
            failonerror="no"
            includeemptydirs="true" />
    <mkdir dir="${dist.dir}" />
  </target>
  <!-- =================================================================== -->
  <!-- C O M P I L E                                                       -->
  <!-- =================================================================== -->
  <target name="compile"
          depends="clean">
    <delete dir="${build.dir}"
            failonerror="no"
            includeemptydirs="true" />
    <mkdir dir="${build.classes.dir}" />
    <echo message="Copying resources from ${src.resources.dir} to ${build.classes.dir}" />
    <copy todir="${build.classes.dir}"
          overwrite="true">
      <fileset dir="${src.resources.dir}">
        <include name="**/*" />
      </fileset>
    </copy>
    <echo message="Compiling from ${src.java.dir} to ${build.classes.dir}" />
    <javac destdir="${build.classes.dir}"
           debug="${compiler.debug}"
           deprecation="${compiler.deprecation}"
           optimize="${compiler.optimize}">
      <classpath refid="project.classpath" />
      <src path="${src.java.dir}" />
    </javac>
  </target>
  <!-- =================================================================== -->
  <!-- T E S T                                                             -->
  <!-- =================================================================== -->
  <target name="test"
          depends="compile">
    <delete dir="${docs.junit.dir}"
            failonerror="no"
            includeemptydirs="true" />
    <delete dir="${test.build.dir}"
            failonerror="no"
            includeemptydirs="true" />
    <mkdir dir="${docs.working.dir}" />
    <mkdir dir="${docs.junit.dir}" />
    <mkdir dir="${test.build.classes.dir}" />
    <echo message="Copying resources from ${test.resources.dir} to ${test.build.classes.dir}" />
    <copy todir="${test.build.classes.dir}"
          overwrite="true">
      <fileset dir="${test.resources.dir}">
        <include name="**/*" />
      </fileset>
    </copy>
    <echo message="Compiling from ${test.java.dir} to ${test.build.classes.dir}" />
    <clover-instr destdir="coverage">
      <fileset dir="${src.java.dir}">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="${test.java.dir}">
        <include name="**/*.java" />
      </fileset>
    </clover-instr>
    <javac srcdir="coverage"
           destdir="${test.build.classes.dir}">
      <classpath location="${build.classes.dir}" />
      <classpath refid="project.classpath" />
    </javac>
    <junit printsummary="withOutAndErr"
           fork="yes"
           haltonfailure="no"
           failureproperty="junit.fail">
      <classpath>
        <pathelement location="${test.build.classes.dir}" />
      </classpath>
      <classpath refid="project.classpath" />
      <classpath refid="clover.classpath" />
      <formatter type="xml" />
      <batchtest fork="yes"
                 todir="${docs.working.dir}">
        <fileset dir="${test.java.dir}">
          <include name="**/*Test*.java" />
          <exclude name="**/Abstract*.java" />
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${docs.working.dir}">
      <fileset dir="${docs.working.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames"
              todir="${docs.junit.dir}" />
    </junitreport>
  	
  	<fail message="Unit test failed" if="junit.fail"/>	
  	
  </target>
  <!-- =================================================================== -->
  <!-- J A R                                                               -->
  <!-- =================================================================== -->
  <target name="jar"
          depends="test">
    <tstamp>
      <format property="now"
              pattern="MM/dd/yyyy hh:mm aa" />
    </tstamp>
    <touch file="${build.dir}/${version}.txt"
           datetime="${now}" />
    <echo file="${build.dir}/${version}.txt"
          append="false"
          message="${version} ${user.name} ${now}" />
    <jar jarfile="${build.dir}/${project}.jar">
    	<manifest>
    	  		  <attribute name="Built-By" value="${user.name}"/>
    	  		  <attribute name="Specification-Title" value="${project}"/>
    	  		  <attribute name="Specification-Version" value="${version}"/>
    	  		  <attribute name="Implementation-Title" value="${project}"/>
    	  		  <attribute name="Implementation-Vendor" value="Aetna"/>
    	  		  <!-- @todo need to substitute the build label from CC -->
    	  		  <attribute name="Implementation-Version" value="${version}"/> 
    	  		  <attribute name="Java-Version" value="${java.version}"/>
    	  	  	  <attribute name="Class-Path" value="commons-net-1.4.0.jar RteIntranet.jar "/>

    	  	  </manifest>
         
      <fileset dir="${build.classes.dir}">
        <include name="**/*.*" />
      </fileset>
      <fileset dir="${build.dir}">
        <include name="${version}.txt" />
      </fileset>
    </jar>
  </target>
  <!-- =================================================================== -->
  <!-- D I S T                                                             -->
  <!-- =================================================================== -->
  <target name="dist"
          depends="jar">
    <delete dir="${dist.dir}"
            failonerror="no"
            includeemptydirs="true" />
    <mkdir dir="${dist.dir}" />
    <copy todir="${dist.dir}"
          overwrite="true">
      <fileset dir="${build.dir}">
        <include name="*.jar" />
      </fileset>
    </copy>
    <copy todir="${master.dist.dir}"
          overwrite="true">
      <fileset dir="${build.dir}">
        <include name="*.jar" />
      </fileset>
    </copy>
  </target>
</project>
