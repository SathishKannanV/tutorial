package com.aetna.prvrte.rteintranet.adapter;



import java.sql.ResultSet;

import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.LinkedHashSet;

import java.util.LinkedList;

import java.util.List;

import java.util.Map;



import javax.sql.DataSource;



import org.apache.commons.logging.Log;

import org.apache.commons.logging.LogFactory;

import org.springframework.jdbc.core.RowMapper;

import org.springframework.jdbc.core.SqlOutParameter;

import org.springframework.jdbc.core.SqlParameter;

import org.springframework.jdbc.core.SqlReturnResultSet;

import org.springframework.jdbc.object.StoredProcedure;



import com.aetna.prvrte.rteintranet.dto.LongRunTransReport3DTO;

import com.aetna.prvrte.rteintranet.dto.LongRunTransactionDTO;

import com.aetna.prvrte.rteintranet.exception.ApplicationException;

import com.aetna.prvrte.rteintranet.util.ApplicationConstants;

import com.aetna.prvrte.rteintranet.vo.LongRunTransReport3VO;

import com.aetna.prvrte.rteintranet.vo.LongRunTransactionVO;



public class LongRunTransLookUpReport3Adapter extends StoredProcedure {



	private final Log log = LogFactory

			.getLog(LongRunTransLookUpReport3Adapter.class);



	private static final String START_TIMESTAMP = "START_TIMESTAMP";

	private static final String END_TIMESTAMP = "END_TIMESTAMP";

	private static final String LOAD_MODULE = "LOAD_MODULE";

	private static final String SECONDS_RANGE = "SECONDS_RANGE";

	private static final String MINUTES_SPLIT = "MINUTES_SPLIT";

	private static final String LS_SQLCODE = "LS_SQLCODE";

	private static final String READ_CURSOR = "READ_CURSOR3";

	private static final String IN_RPT_IND = "IN_RPT_IND";



	public LongRunTransLookUpReport3Adapter(DataSource datasource,

			String storedProc) {

		super(datasource, storedProc);



		declareParameter(new SqlParameter(START_TIMESTAMP, Types.TIMESTAMP));

		declareParameter(new SqlParameter(END_TIMESTAMP, Types.TIMESTAMP));

		declareParameter(new SqlParameter(LOAD_MODULE, Types.CHAR));

		declareParameter(new SqlParameter(SECONDS_RANGE, Types.DECIMAL));

		declareParameter(new SqlParameter(MINUTES_SPLIT, Types.DECIMAL));

		declareParameter(new SqlParameter(IN_RPT_IND, Types.CHAR));

		declareParameter(new SqlOutParameter(LS_SQLCODE, Types.INTEGER));

		declareParameter(new SqlReturnResultSet(READ_CURSOR, new RowMapper() {



			/*

			 * (non-Javadoc)

			 * 

			 * @see

			 * org.springframework.jdbc.core.RowMapper#mapRow(java.sql.ResultSet

			 * , int)

			 */

			public Object mapRow(final ResultSet rs, final int arg1)

					throws SQLException {



				LongRunTransactionDTO longRunTransDTO = new LongRunTransactionDTO();

				longRunTransDTO.setResultSecondsResult(rs

						.getString("TIME_SECONDS"));

				longRunTransDTO.setResult3StartTime(rs.getTimestamp("START_TIMEP").toString());

				longRunTransDTO.setResult3EndTime(rs.getTimestamp("END_TIMEP").toString());

				longRunTransDTO.setResult3CNT(rs.getString("CNT"));

				return longRunTransDTO;

			}



		}));



	}



	@SuppressWarnings("unchecked")

	public Map getLongrunTransLookUpTable(LongRunTransactionDTO longrunTransDTO)

			throws ApplicationException {

		log.warn("Entered LongRunTransLookUpReport2Adapter  - getLongrunTransLookUpTable");



		Map<String, String> params = new java.util.HashMap<String, String>();

		Map longRunTransMap = new HashMap();

		params.put(START_TIMESTAMP, longrunTransDTO.getStartTimestamp());

		params.put(END_TIMESTAMP, longrunTransDTO.getEndTimestamp());

		params.put(LOAD_MODULE, longrunTransDTO.getModule());

		params.put(SECONDS_RANGE, longrunTransDTO.getSecondsCalc());

		params.put(MINUTES_SPLIT, longrunTransDTO.getMinutesCalc());

		params.put(IN_RPT_IND, "3");

		log.warn(params);

		Map results = null;



		List<LongRunTransactionDTO> longRunTransList = new LinkedList<LongRunTransactionDTO>();

		String newMessage = "";

		List<LongRunTransReport3DTO> longRunTrans3List = new ArrayList<LongRunTransReport3DTO>();

		try {



			results = execute(params);

			log.warn("LongRunTransLookUpReport2Adapter: Executed stored procedure");

			String sqlCode = String.valueOf(results.get(LS_SQLCODE));



			longRunTransList = (List<LongRunTransactionDTO>) results

					.get(READ_CURSOR);

			if (longRunTransList != null && longRunTransList.isEmpty()) {



				if ("0".equals(sqlCode)) {

					newMessage = "No Data on database ";

				}else if ("-905".equals(sqlCode)){

					newMessage = "Try to minimize the start time and end time for results" + sqlCode;

				} 

				else {

					newMessage = "Problem in DB2. sqlcode: " + sqlCode;

				}

			} else {

				newMessage = "";

				// Report3 start

				List<String> startTimeReport3 = new ArrayList<String>();

				try {

					if (longRunTransList != null && !longRunTransList.isEmpty()) {

						for (LongRunTransactionDTO test : longRunTransList) {

							startTimeReport3.add(test.getResult3StartTime());

						}

						startTimeReport3 = new ArrayList<String>(

								new LinkedHashSet<String>(startTimeReport3));

						

						LongRunTransReport3DTO report3Greater7 = new LongRunTransReport3DTO();

						for (String startTime : startTimeReport3) {

							int greaterSevenRecords = 0;

							boolean greaterSevenFlag = false;

							LongRunTransReport3DTO report3 = new LongRunTransReport3DTO();

							for (LongRunTransactionDTO values : longRunTransList) {

								if (startTime.equals(values

										.getResult3StartTime())) {



									if (Integer.parseInt(values

											.getResultSecondsResult()) == 0) {

										report3.setZeroTimeTaken(values

												.getResult3CNT());

									} else if (Integer.parseInt(values

											.getResultSecondsResult()) == 1) {

										report3.setOneTimeTaken(values

												.getResult3CNT());

									} else if (Integer.parseInt(values

											.getResultSecondsResult()) == 2) {

										report3.setTwoTimeTaken(values

												.getResult3CNT());

									} else if (Integer.parseInt(values

											.getResultSecondsResult()) == 3) {

										report3.setThreeTimeTaken(values

												.getResult3CNT());

									} else if (Integer.parseInt(values

											.getResultSecondsResult()) == 4) {

										report3.setFourTimeTaken(values

												.getResult3CNT());

									} else if (Integer.parseInt(values

											.getResultSecondsResult()) == 5) {

										report3.setFiveTimeTaken(values

												.getResult3CNT());

									} else if (Integer.parseInt(values

											.getResultSecondsResult()) == 6) {

										report3.setSixTimeTaken(values

												.getResult3CNT());

									} else if (Integer.parseInt(values

											.getResultSecondsResult()) >= 7) {

										greaterSevenFlag = true;

										greaterSevenRecords = greaterSevenRecords

												+ Integer.parseInt(values

														.getResult3CNT());

										String s3 = Integer

												.toString(greaterSevenRecords);

										report3.setSevenTimeTaken(s3);

									}

									String endDate = values.getResult3EndTime();

									String split[] = startTime.split(" ");

									String split1[] = endDate.split(" ");

									report3.setStartDate(split[0]);

									report3.setStartTime(split[1]);

									report3.setEndTime(split1[1]);

									longRunTrans3List.add(report3);

								}

							}

						}

						longRunTrans3List = new ArrayList<LongRunTransReport3DTO>(

								new LinkedHashSet<LongRunTransReport3DTO>(longRunTrans3List));

						System.out.println(longRunTrans3List);

						for (LongRunTransReport3DTO values : longRunTrans3List) {

							if (values.getZeroTimeTaken().equals("")) {

								values.setZeroTimeTaken("0");

							}

							if (values.getOneTimeTaken().equals("")) {

								values.setOneTimeTaken("0");

							}

							if (values.getTwoTimeTaken().equals("")) {

								values.setTwoTimeTaken("0");

							}

							if (values.getThreeTimeTaken().equals("")) {

								values.setThreeTimeTaken("0");

							}

							if (values.getFourTimeTaken().equals("")) {

								values.setFourTimeTaken("0");

							}

							if (values.getFiveTimeTaken().equals("")) {

								values.setFiveTimeTaken("0");

							}

							if (values.getSixTimeTaken().equals("")) {

								values.setSixTimeTaken("0");

							}

							if (values.getSevenTimeTaken().equals("")) {

								values.setSevenTimeTaken("0");

							}

						}

					}

				} catch (Exception e) {

					System.out.println(e);

				}



				// Report3 end

			}

			longRunTransMap.put("longRunTransMessage", newMessage);

			longRunTransMap.put("longRunTransList", longRunTrans3List);

			return longRunTransMap;

		} catch (Exception exception) {

			log.error("LongRunTransLookUpReport2Adapter : generic error occured  "

					+ exception);

			throw new ApplicationException(ApplicationConstants.ERR_GENERIC,

					exception.getMessage(), exception);

		}



	}

}

