/**

 * 

 */

package com.aetna.prvrte.rteintranet.adapter;



import java.sql.SQLException;

import java.sql.Types;

import java.util.HashMap;

import java.util.LinkedHashMap;

import java.util.Map;



import javax.sql.DataSource;



import org.apache.commons.logging.Log;

import org.apache.commons.logging.LogFactory;

import org.springframework.jdbc.core.SqlOutParameter;

import org.springframework.jdbc.core.SqlParameter;

import org.springframework.jdbc.object.StoredProcedure;



import com.aetna.prvrte.rteintranet.dto.RbrcDTO;

import com.aetna.prvrte.rteintranet.exception.ApplicationException;

import com.aetna.prvrte.rteintranet.util.ApplicationConstants;

import com.aetna.prvrte.rteintranet.util.DBConstants;

import com.aetna.prvrte.rteintranet.util.RteIntranetUtils;



/**

 * @author N657186

 * Cognizant_Offshore

 */

public class RbrcDeleteAdapter extends StoredProcedure{



	/**

	 * Instance of Log Factory.

	 */

	private final Log log = LogFactory.getLog(RbrcDeleteAdapter.class);

	/**

	 * 

	 * @param datasource

	 * @param storedProc

	 * @throws SQLException

	 */

	public RbrcDeleteAdapter(DataSource datasource, String storedProc) {

		super(datasource, storedProc);

		

		declareParameter(new SqlParameter(DBConstants.LS_SITE_CD, Types.CHAR));

		declareParameter(new SqlParameter(DBConstants.LS_RIDER_CD, Types.CHAR));

		declareParameter(new SqlParameter(DBConstants.LS_SVCTYP_CD, Types.CHAR));

		declareParameter(new SqlParameter(DBConstants.LS_TOS_CD, Types.CHAR));

		

		declareParameter(new SqlOutParameter(DBConstants.LS_SQLCODE, Types.INTEGER));

		

	}

	

	/**

	 * @param rbrcDTO

	 * @return

	 * @throws ApplicationException

	 */

	@SuppressWarnings("unchecked")

	public Map deleteRbrc(RbrcDTO rbrcDTO) throws ApplicationException {

		

		log.warn("Entered RbrcDeleteAdapter  - deleteRbrc");

		boolean isRbrcDeleted = false;

		String newMessage ="";

		Map results = null;

		Map<String, String> params = new LinkedHashMap<String, String>();

		Map rbrcMap = new HashMap();

			

		params.put(DBConstants.LS_SITE_CD, RteIntranetUtils.getTrimmedString(rbrcDTO.getDbSiteCd()));

		params.put(DBConstants.LS_RIDER_CD, RteIntranetUtils.getTrimmedString(rbrcDTO.getDbRiderCd()));

		params.put(DBConstants.LS_SVCTYP_CD, RteIntranetUtils.getTrimmedString(rbrcDTO.getDbSvcTypeCd()));

		params.put(DBConstants.LS_TOS_CD, RteIntranetUtils.getTrimmedString(rbrcDTO.getDbTOSCd()));

		

		log.warn(params);	

		try {

			results = execute(params);

			log.warn("RbrcDeleteAdapter: Executed stored procedure");

			

			String sqlCode =  String.valueOf(results

					.get(DBConstants.LS_SQLCODE));

			

			if ("0".equalsIgnoreCase(sqlCode)) 

				isRbrcDeleted = true;

			else {

				newMessage = "Deleting of rows failed with a SQLCODE code of " + sqlCode;

			}

			rbrcMap.put("rbrcMessage", newMessage);

			rbrcMap.put("isRbrcDeleted", isRbrcDeleted);

			return rbrcMap;

		}catch (Exception exception){

			

			log.error("RbrcDeleteAdapter : generic error occured  "+exception);

			throw new ApplicationException(ApplicationConstants.ERR_GENERIC,exception.getMessage(),exception);

		}

	}

	

}

