##############################################################

# aefw-setup.jy

#

#  1) Create WebSphere variable AEFW_SHARED_LIBS

#  2) Set custom web container property com.ibm.ws.webcontainer.invokefilterscompatibility = true

#  3) Create QueueConnectionFactory for AEFW logging

#  4) Create Queue for AEFW logging

#  5) Create QueueConnectionFactory for AEFW event support

#  6) Create Queue for AEFW event support

#  7) Create JVM arguments required by AEFW

#

##############################################################



import sys



global AdminConfig



def readProperties():

	propsFileName = "aefw-setup.properties"

	propsFile = open(propsFileName, 'r')

	for line in propsFile.readlines():

		if (line.find(":=") != -1):

			(key, val) = line.split(":=")

			props[key.strip()] = val.strip()

	propsFile.close()

	

def setupWebSphereVar():

	print "Defining WebSphere variables..."

	varMap = AdminConfig.getid(serverKey + '/VariableMap:/')

	key = ['symbolicName', props['sharedLibHome']]

	val = ['value', props['sharedLibHomeValue']]

	entry = [key,val]

	entries = [entry]

	allEntries = ['entries', entries]

	entrylist = AdminConfig.showAttribute(varMap, 'entries')

	arrayModules = entrylist[1:len(entrylist)-1].split(" ")

	found = "false"

	for module in arrayModules:

		varname = AdminConfig.showAttribute(module, 'symbolicName')

		if (varname == props['sharedLibHome']):

			print "Variable " + props['sharedLibHome'] + " is already defined. Redefining it..."

			AdminConfig.modify(module, entry)

			print "WebSphere variable setup complete"

			return

	print "Variable " + props['sharedLibHome'] + " is not defined. Defining it..."

	AdminConfig.modify(varMap, [allEntries])

	print "WebSphere variable setup complete."

	

def setWebContainerProperties():

	wcid = AdminConfig.getid(serverKey + '/ApplicationServer:/WebContainer:/')

	wcattrs = [["name", "com.ibm.ws.webcontainer.invokefilterscompatibility"],["value", "true"]]

	AdminConfig.create("Property", wcid, wcattrs, "properties")

	print "WebContainer property set complete. (com.ibm.ws.webcontainer.invokefilterscompatibility)"

	

def createQcf(name, jndiName, channel, host, queueManager, transportType, port, displayName):

	print 'Defining QueueConnectionFactory resource for ' + displayName + '...'

	qcfAttrs = [['name', name], ['jndiName', jndiName], ['channel', channel], ['host', host], ['queueManager', queueManager], ['transportType', transportType], ['port', port]]

	qcf = AdminConfig.getid(serverKey + '/JMSProvider:WebSphere MQ JMS Provider/MQQueueConnectionFactory:' + name + '/')

	if (len(qcf) == 0):

		print 'QueueConnectionFactory resource for ' + displayName + ' is not defined.  Defining it...'

		jmsPid = AdminConfig.getid(serverKey + '/JMSProvider:WebSphere MQ JMS Provider')

		lineseparator = java.lang.System.getProperty('line.separator')

		template = AdminConfig.listTemplates('MQQueueConnectionFactory').split(lineseparator)[0]

		AdminConfig.createUsingTemplate('MQQueueConnectionFactory', jmsPid, qcfAttrs, template)

	else:

		print 'QueueConnectionFactory resource for ' + displayName + ' is already defined.  Redefining it...'

		AdminConfig.modify(qcf, qcfAttrs)

	print "Queue connection factory setup for AEFW logging complete."



def createQueue(name, jndiName, baseQueueName, targetClient, displayName):

	print 'Defining Queue resource for ' + displayName + '...'

	qAttrs = [['name', name], ['jndiName', jndiName], ['baseQueueName', baseQueueName], ['targetClient', targetClient]]

	q = AdminConfig.getid(serverKey + '/JMSProvider:WebSphere MQ JMS Provider/MQQueue:' + name + '/')

	if (len(q) == 0):

		print 'Queue resource for ' + displayName + ' is not defined.  Defining it...'

		lineseparator = java.lang.System.getProperty('line.separator')

		jmsPid = AdminConfig.getid(serverKey + '/JMSProvider:WebSphere MQ JMS Provider')

		template = AdminConfig.listTemplates('MQQueue').split(lineseparator)[0]

		AdminConfig.createUsingTemplate('MQQueue', jmsPid, qAttrs, template)

	else:

		print 'Queue resource for ' + displayName + ' is already defined.  Redefining it...'

		AdminConfig.modify(q, qAttrs)

	print 'Queue resource setup for ' + displayName + ' complete.'



def createJVMArgs():

	print "Defining JVM arguments..."

	jvm = AdminConfig.list('JavaVirtualMachine', server)

	AdminConfig.modify(jvm,[['genericJvmArguments', props['jvmArgs']]])

	print "JVM arguments defined."



#########   Main     ##########



print "Setting up AEFW on the test server..."

    

# Dictionary for the properties

props = {}



# Read the properties

readProperties()

                

# Get the server id

serverKey = '/Server:' + props['serverName']

server = AdminConfig.getid(serverKey + '/')



try:

	# Setup WebSphere variable for AEFW_SHARED_LIBS

	setupWebSphereVar()

	# Set custom web container property com.ibm.ws.webcontainer.invokefilterscompatibility = true

	setWebContainerProperties()

	# Create logging QueueConnectionFactory

	createQcf(props['logging.qcfName'], props['logging.qcfJndiName'], props['logging.qcfChannelName'], props['logging.qcfHost'], props['logging.qcfManager'], props['logging.qcfTransportType'], props['logging.qcfPort'], 'AEFW logging')

	# Define logging Queue

	createQueue(props['logging.qName'], props['logging.qJndiName'], props['logging.qBaseQName'], props['logging.qTargetClient'], 'AEFW logging')

	# Create event QueueConnectionFactory

	createQcf(props['event.qcfName'], props['event.qcfJndiName'], props['event.qcfChannelName'], props['event.qcfHost'], props['event.qcfManager'], props['event.qcfTransportType'], props['event.qcfPort'], 'AEFW event support')

	# Define event Queue

	createQueue(props['event.qName'], props['event.qJndiName'], props['event.qBaseQName'], props['event.qTargetClient'], 'AEFW event support')

	# Create JVM arguments

	createJVMArgs()

	# Save the config

	AdminConfig.save()

	print "Finished setting up AEFW on the test server."

except:

	print "Exception occured ", sys.exc_type, sys.exc_value

	print "Stopping script execution.  Nothing saved."
