package com.aetna.prvrte.rteintranet.adapter;



import java.sql.ResultSet;

import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.LinkedHashSet;

import java.util.LinkedList;

import java.util.List;

import java.util.Map;



import javax.sql.DataSource;



import org.apache.commons.logging.Log;

import org.apache.commons.logging.LogFactory;

import org.springframework.jdbc.core.RowMapper;

import org.springframework.jdbc.core.SqlOutParameter;

import org.springframework.jdbc.core.SqlParameter;

import org.springframework.jdbc.core.SqlReturnResultSet;

import org.springframework.jdbc.object.StoredProcedure;



import com.aetna.prvrte.rteintranet.dto.LongRunTransReport3DTO;

import com.aetna.prvrte.rteintranet.dto.LongRunTransReport4DTO;

import com.aetna.prvrte.rteintranet.dto.LongRunTransactionDTO;

import com.aetna.prvrte.rteintranet.exception.ApplicationException;

import com.aetna.prvrte.rteintranet.util.ApplicationConstants;

import com.aetna.prvrte.rteintranet.vo.LongRunTransReport3VO;

import com.aetna.prvrte.rteintranet.vo.LongRunTransactionVO;



public class LongRunTransLookUpReport4Adapter extends StoredProcedure {



	private final Log log = LogFactory

			.getLog(LongRunTransLookUpReport4Adapter.class);



	private static final String START_TIMESTAMP = "START_TIMESTAMP";

	private static final String END_TIMESTAMP = "END_TIMESTAMP";

	private static final String LOAD_MODULE = "LOAD_MODULE";

	private static final String SECONDS_RANGE = "SECONDS_RANGE";

	private static final String MINUTES_SPLIT = "MINUTES_SPLIT";

	private static final String LS_SQLCODE = "LS_SQLCODE";

	private static final String READ_CURSOR = "READ_CURSOR4";

	private static final String IN_RPT_IND = "IN_RPT_IND";



	public LongRunTransLookUpReport4Adapter(DataSource datasource,

			String storedProc) {

		super(datasource, storedProc);



		declareParameter(new SqlParameter(START_TIMESTAMP, Types.TIMESTAMP));

		declareParameter(new SqlParameter(END_TIMESTAMP, Types.TIMESTAMP));

		declareParameter(new SqlParameter(LOAD_MODULE, Types.CHAR));

		declareParameter(new SqlParameter(SECONDS_RANGE, Types.DECIMAL));

		declareParameter(new SqlParameter(MINUTES_SPLIT, Types.DECIMAL));

		declareParameter(new SqlParameter(IN_RPT_IND, Types.CHAR));

		declareParameter(new SqlOutParameter(LS_SQLCODE, Types.INTEGER));

		declareParameter(new SqlReturnResultSet(READ_CURSOR, new RowMapper() {



			/*

			 * (non-Javadoc)

			 * 

			 * @see

			 * org.springframework.jdbc.core.RowMapper#mapRow(java.sql.ResultSet

			 * , int)

			 */

			public Object mapRow(final ResultSet rs, final int arg1)

					throws SQLException {



				LongRunTransactionDTO longRunTransDTO = new LongRunTransactionDTO();

				longRunTransDTO.setConvrsnCDResult(rs

						.getString("CASE_COL"));

				longRunTransDTO.setResultSecondsResult(rs

						.getString("TIME_STAMPS"));

				longRunTransDTO.setResult3CNT(rs.getString("CNT"));

				return longRunTransDTO;

			}



		}));



	}



	@SuppressWarnings("unchecked")

	public Map getLongrunTransLookUpTable(LongRunTransactionDTO longrunTransDTO)

			throws ApplicationException {

		log.warn("Entered LongRunTransLookUpReport4Adapter  - getLongrunTransLookUpTable");



		Map<String, String> params = new java.util.HashMap<String, String>();

		Map longRunTransMap = new HashMap();

		params.put(START_TIMESTAMP, longrunTransDTO.getStartTimestamp());

		params.put(END_TIMESTAMP, longrunTransDTO.getEndTimestamp());

		params.put(LOAD_MODULE, longrunTransDTO.getModule());

		params.put(SECONDS_RANGE, longrunTransDTO.getSecondsCalc());

		params.put(MINUTES_SPLIT, longrunTransDTO.getMinutesCalc());

		params.put(IN_RPT_IND, "4");

		log.warn(params);

		Map results = null;



		List<LongRunTransactionDTO> longRunTransList = new LinkedList<LongRunTransactionDTO>();

		String newMessage = "";

		List<LongRunTransReport4DTO> longRunTrans3List = new ArrayList<LongRunTransReport4DTO>();

		try {



			results = execute(params);

			log.warn("LongRunTransLookUpReport4Adapter: Executed stored procedure");

			String sqlCode = String.valueOf(results.get(LS_SQLCODE));



			longRunTransList = (List<LongRunTransactionDTO>) results

					.get(READ_CURSOR);

			if (longRunTransList != null && longRunTransList.isEmpty()) {



				if ("0".equals(sqlCode)) {

					newMessage = "No Data on database ";

				} else if ("-905".equals(sqlCode)){

					newMessage = "Try to minimize the start time and end time for results" + sqlCode;

				}

				else {

					newMessage = "Problem in DB2. sqlcode: " + sqlCode;

				}

			} else {

				newMessage = "";

				// Report3 start

				List<String> transLevelReport4 = new ArrayList<String>();

				try {

					if (longRunTransList != null && !longRunTransList.isEmpty()) {

						for (LongRunTransactionDTO test : longRunTransList) {

							transLevelReport4.add(test.getResultSecondsResult());

						}

						transLevelReport4 = new ArrayList<String>(

								new LinkedHashSet<String>(transLevelReport4));

						for (String reportName : transLevelReport4) {

							LongRunTransReport4DTO report3 = new LongRunTransReport4DTO();

							for (LongRunTransactionDTO values : longRunTransList) {

								if (reportName.equals(values

										.getResultSecondsResult())) {



									if (values.getConvrsnCDResult().equals("PROVIDER")) {

										report3.setProviderCount(values

												.getResult3CNT());

									} else if (values.getConvrsnCDResult().equals("DM PROCESS")) {

										report3.setDmCount(values

												.getResult3CNT());

									} else if (values.getConvrsnCDResult().equals("TRADITIONAL")) {

										report3.setTradCount(values

												.getResult3CNT());

									} else if (values.getConvrsnCDResult().equals("DENTAL")) {

										report3.setDentalCount(values

												.getResult3CNT());

									} else if (values.getConvrsnCDResult().equals("HMO")) {

										report3.setHmoCount(values

												.getResult3CNT());

									} else if (values.getConvrsnCDResult().equals("OUTBOUND")) {

										report3.setOutBoundCount(values

												.getResult3CNT());

									} else if (values.getConvrsnCDResult().equals("HRP")) {

										report3.setHrpCount(values

												.getResult3CNT());

									} else if (values.getConvrsnCDResult().equals("ASH/SRC")) {

										

										report3.setAsjCount(values

												.getResult3CNT());

									}

									report3.setSeconds(reportName);

									longRunTrans3List.add(report3);

								}

							}

						}

						longRunTrans3List = new ArrayList<LongRunTransReport4DTO>(

								new LinkedHashSet<LongRunTransReport4DTO>(longRunTrans3List));

						System.out.println(longRunTrans3List);

						for (LongRunTransReport4DTO values : longRunTrans3List) {

							if(values.getDmCount().equals("")){

								values.setDmCount("0");

							}if(values.getTradCount().equals("")){

								values.setTradCount("0");

							}if(values.getDentalCount().equals("")){

								values.setDentalCount("0");

							}if(values.getHmoCount().equals("")){

								values.setHmoCount("0");

							}if(values.getOutBoundCount().equals("")){

								values.setOutBoundCount("0");

							}if(values.getProviderCount().equals("")){

								values.setProviderCount("0");

							}if(values.getHrpCount().equals("")){

								values.setHrpCount("0");

							}if(values.getAsjCount().equals("")){

								values.setAsjCount("0");

							}

						}

					}

				} catch (Exception e) {

					System.out.println(e);

				}



				// Report3 end

			}

			longRunTransMap.put("longRunTransMessage", newMessage);

			longRunTransMap.put("longRunTransList", longRunTrans3List);

			return longRunTransMap;

		} catch (Exception exception) {

			log.error("LongRunTransLookUpReport2Adapter : generic error occured  "

					+ exception);

			throw new ApplicationException(ApplicationConstants.ERR_GENERIC,

					exception.getMessage(), exception);

		}



	}

}

